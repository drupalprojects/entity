<?php
// $Id$

/**
 * @file
 * Entity Metadata tests.
 */

/**
 * Test basic metadata functionality.
 */
class EntityMetadataTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Metadata Wrapper',
      'description' => 'Makes sure metadata wrapper are working right.',
      'group' => 'Entity',
    );
  }

  function setUp() {
    parent::setUp('entity_metadata');
    // Create a field having 4 values for testing multiple value support.
    $this->field_name = drupal_strtolower($this->randomName() . '_field_name');
    $this->field = array('field_name' => $this->field_name, 'type' => 'text', 'cardinality' => 4);
    $this->field = field_create_field($this->field);
    $this->field_id = $this->field['id'];
    $this->instance = array(
      'field_name' => $this->field_name,
      'object_type' => 'node',
      'bundle' => 'page',
      'label' => $this->randomName() . '_label',
      'description' => $this->randomName() . '_description',
      'weight' => mt_rand(0, 127),
      'settings' => array(
        'text_processing' => FALSE,
      ),
      'widget' => array(
        'type' => 'text_textfield',
        'label' => 'Test Field',
        'settings' => array(
          'size' => 64,
        )
      )
    );
    field_create_instance($this->instance);
  }

  /**
   * Creates a user and a node, then tests getting the properties.
   */
  function testEntityMetadataWrapper() {
    $account = $this->drupalCreateUser();
    // For testing sanitizing give the user a malicious user name
    $account = user_save($account, array('name' => '<b>BadName</b>'));
    $title = '<b>Is it bold?<b>';
    $body[LANGUAGE_NONE][0] = array('value' => '<b>The body & nothing.</b>');
    $node = $this->drupalCreateNode(array('uid' => $account->uid, 'name' => $account->name, 'body' => $body, 'title' => $title, 'summary' => ''));

    // First test without sanitizing.
    $wrapper = entity_metadata_wrapper('node', $node);

    $this->assertEqual('<b>Is it bold?<b>', $wrapper->title->value(), 'Getting a field value.');
    $this->assertEqual(node_type_get_name($node->type), $wrapper->{'type-name'}->raw(), 'Getting a raw property value.');

    // Test chaining
    $this->assertEqual($account->mail, $wrapper->author->mail->value(), 'Testing chained usage.');
    $this->assertEqual($account->name, $wrapper->author->name->value(), 'Testing chained usage with callback and sanitizing.');

    // Test sanitized output.
    $options = array('sanitize' => TRUE);
    $this->assertEqual(check_plain('<b>Is it bold?<b>'), $wrapper->title->value($options), 'Getting sanitized field.');
    $this->assertEqual(filter_xss($node->name), $wrapper->author->name->value($options), 'Getting sanitized property with getter callback.');

    // Test getting an not existing property
    try {
      echo $wrapper->dummy;
      $this->fail('Getting an not existing property.');
    }
    catch (EntityMetadataWrapperException $e) {
      $this->pass('Getting an not existing property.');
    }

    // Test setting.
    $wrapper->uid = 0;
    $this->assertEqual(0, $wrapper->uid->value(), 'Setting a property.');
    try {
      $wrapper->url = 'dummy';
      $this->fail('Setting an unsupported property.');
    }
    catch (EntityMetadataWrapperException $e) {
      $this->pass('Setting an unsupported property.');
    }

    // Test getting by the field API processed values like the node body and
    // whether auto-adding bundle properties works.
    $body_value = $wrapper->body->value;
    $this->assertEqual("<p>The body &amp; nothing.</p>\n", $body_value->value(), "Getting processed value.");
    $this->assertEqual("The body & nothing.\n", $body_value->value(array('decode' => TRUE)), "Decoded value.");
    $this->assertEqual("<b>The body & nothing.</b>", $body_value->raw(), "Raw body returned.");
    $info = $body_value->info();

    $wrapper->body->set(array('value' => "<b>The second body.</b>"));
    $this->assertEqual("<p>The second body.</p>\n", $wrapper->body->value->value(), "Setting a processed field value and reading it again.");
    $node = $wrapper->value();
    $this->assertEqual($node->body[LANGUAGE_NONE][0]['value'], "<b>The second body.</b>", 'Update appears in the wrapped entity.');

    // Test iterator
    $type_info = entity_metadata_get_info('node');
    $this->assertFalse(array_diff_key($type_info['properties'], iterator_to_array($wrapper->getIterator())), 'Iterator is working.');

    // Test setting a new node.
    $wrapper->set($node);

    // Test getting options lists.
    $this->assertEqual($wrapper->type->optionsList(), node_type_get_names(), 'Options list returned.');
  }

  /**
   * Test supporting multi-valued fields.
   */
  function testListMetadataWrappers() {
    $name = $this->field_name;
    $values = array();
    $values[LANGUAGE_NONE][0] = array('value' => '<b>2009-09-05</b>');
    $values[LANGUAGE_NONE][1] = array('value' => '2009-09-05');
    $values[LANGUAGE_NONE][2] = array('value' => '2009-08-05');

    $node = $this->drupalCreateNode(array('type' => 'page', $name => $values));
    $wrapper = entity_metadata_wrapper('node', $node);

    $property = str_replace('_', '-', $name);
    $this->assertEqual('<b>2009-09-05</b>', $wrapper->{$property}[0]->value(), 'Getting array entry.');
    $this->assertEqual('2009-09-05', $wrapper->{$property}->get(1)->value(), 'Getting array entry.');
    $this->assertEqual(3, count($wrapper->{$property}->value()), 'Getting the whole array.');

    // Test sanitizing
    $this->assertEqual(check_plain('<b>2009-09-05</b>'), $wrapper->{$property}[0]->value(array('sanitize' => TRUE)), 'Getting array entry.');

    // Test iterator
    $this->assertEqual(iterator_to_array($wrapper->$property->getIterator()), $wrapper->$property->value(), 'Iterator is working.');

    // Make sure changing the array changes the actual entity property.
    $wrapper->{$property}[0] = '2009-10-05';
    unset($wrapper->{$property}[1], $wrapper->{$property}[2]);
    $this->assertEqual($wrapper->{$property}->value(), array('2009-10-05'), 'Setting multiple property values.');

    // Test setting an arbitrary list item.
    $wrapper = entity_metadata_wrapper('list<date>', $list = array(0 => REQUEST_TIME));
    $wrapper[1] = strtotime('2009-09-05');
    $this->assertEqual($wrapper->value(), array(REQUEST_TIME, strtotime('2009-09-05')), 'Setting a list item.');
  }

  /**
   * Tests using the wrapper without any data.
   */
  function testWithoutData() {
    $wrapper = entity_metadata_wrapper('node', NULL, array('bundle' => 'page'));
    $this->assertTrue(isset($wrapper->title), 'Bundle properties have been added.');
    $info = $wrapper->author->mail->info();
    $this->assertTrue(!empty($info) && is_array($info) && isset($info['label']), 'Property info returned.');
  }

  /**
   * Test using access() method.
   */
  function testAccess() {
    // Test without data.
    $account = $this->drupalCreateUser(array('bypass node access'));
    $this->assertTrue(entity_metadata_entity_access('view', 'node', NULL, $account), 'Access without data checked.');

    // Test with actual data.
    $values[LANGUAGE_NONE][0] = array('value' => '<b>2009-09-05</b>');
    $values[LANGUAGE_NONE][1] = array('value' => '2009-09-05');
    $node = $this->drupalCreateNode(array('type' => 'page', $this->field_name => $values));
    $this->assertTrue(entity_metadata_entity_access('delete', 'node', $node, $account), 'Access with data checked.');

    // Test per property access without data.
    $account2 = $this->drupalCreateUser(array('bypass node access', 'administer nodes'));
    $wrapper = entity_metadata_wrapper('node', NULL, array('bundle' => 'page'));
    $this->assertFalse($wrapper->status->access('edit', $account), 'Access for admin property denied.');
    $this->assertTrue($wrapper->status->access('edit', $account2), 'Access for admin property allowed for the admin.');

    // Test per property access with data.
    $wrapper = entity_metadata_wrapper('node', $node, array('bundle' => 'page'));
    $this->assertFalse($wrapper->status->access('edit', $account), 'Access for admin property denied.');
    $this->assertTrue($wrapper->status->access('edit', $account2), 'Access for admin property allowed for the admin.');

    // Test field level access.
    $this->assertTrue($wrapper->{$this->field_name}->access('view'), 'Field access granted.');
  }

  /**
   * Tests using a data structure with passed in metadata.
   */
  function testDataStructureWrapper() {
    $log_entry = array(
      'type'        => 'entity',
      'message'     => $this->randomName(8),
      'variables'   => array(),
      'severity'    => WATCHDOG_NOTICE,
      'link'        => '',
      'user'        => $GLOBALS['user'],
    );
    $info['data info']['properties'] = array(
      'type' => array('type' => 'text', 'label' => 'The category to which this message belongs.'),
      'message' => array('type' => 'text', 'label' => 'The log message.'),
      'user' => array('type' => 'user', 'label' => 'The user causing the log entry.'),
    );
    $wrapper = entity_metadata_wrapper('log_entry', $log_entry, $info);
    $this->assertEqual($wrapper->user->name->value(), $GLOBALS['user']->name, 'Wrapped custom entity.');
  }

  function testEntityQuery() {
    $title = '<b>Is it bold?<b>';
    $values[LANGUAGE_NONE][0] = array('value' => 'foo');
    $node = $this->drupalCreateNode(array($this->field_name => $values, 'title' => $title));

    $results = entity_metadata_entity_query('node', 'title', array($title, 'another title'));
    $this->assertEqual($results, array($node->nid), 'Queried nodes with a given title.');

    $results = entity_metadata_entity_query('node', $this->field_name, 'foo');
    $this->assertEqual($results, array($node->nid), 'Queried nodes with a given field value.');
  }
}

/**
 * Tests provided module integration of the core modules.
 */
class EntityMetadataIntegrationTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Metadata integration',
      'description' => 'Tests using metadata wrappers provided for drupal core.',
      'group' => 'Entity',
    );
  }

  function setUp() {
    parent::setUp('entity_metadata', 'book', 'statistics');
  }


  protected function assertException($wrapper, $name, $text = NULL) {
    $this->assertTrue(isset($wrapper->$name), 'Property ' . check_plain($name) . ' exists.');
    $text = isset($text) ? $text : 'Getting the not set property ' . $name . ' throws exception.';
    try {
      $wrapper->$name->value();
      $this->fail($text);
    }
    catch (EntityMetadataWrapperException $e) {
      $this->pass($text);
    }
  }

  protected function assertValue($wrapper, $key) {
    $this->assertTrue($wrapper->$key->value() !== NULL, check_plain($key) . ' property returned.');
    $info = $wrapper->$key->info();
    if (!empty($info['raw getter callback'])) {
      // Also test getting the raw value
      $this->assertTrue($wrapper->$key->raw() !== NULL, check_plain($key) . ' raw value returned.');
    }
  }

  /**
   * Test book module integration.
   */
  function testBookModule() {
    $title = 'Book 1';
    $node = $this->drupalCreateNode(array('title' => $title, 'type' => 'book'));
    $node2 = $this->drupalCreateNode(array('type' => 'book', 'book' => array('bid' => $node->nid)));
    $node3 = $this->drupalCreateNode(array('type' => 'page'));

    // Test whether the properties work.
    $wrapper = entity_metadata_wrapper('node', $node2);
    $this->assertEqual("Book 1", $wrapper->book->title->value(), "Book title returned.");
    $this->assertEqual($node->nid, $wrapper->{'book-id'}->value(), "Book id returned.");

    // Try using book properties for no book nodes.
    $wrapper = entity_metadata_wrapper('node', $node3);
    $this->assertException($wrapper, 'book');
  }

  /**
   * Test properties of a comment.
   */
  function testComments() {
    $title = 'Node 1';
    $node = $this->drupalCreateNode(array('title' => $title, 'type' => 'page'));
    $account = $this->drupalCreateUser();
    $comment = (object)array(
      'subject' => 'topic',
      'nid' => $node->nid,
      'uid' => $account->uid,
      'cid' => FALSE,
      'pid' => 0,
      'homepage' => '',
      'language' => LANGUAGE_NONE,
      'hostname' => ip_address(),
    );
    $comment->comment_body[LANGUAGE_NONE][0] = array('value' => 'text', 'format' => 0);
    comment_save($comment);
    $wrapper = entity_metadata_wrapper('comment', $comment);
    foreach ($wrapper as $key => $info) {
      if ($key != 'parent') {
        $this->assertValue($wrapper, $key);
      }
    }
    $this->assertException($wrapper, 'parent');
  }

  /**
   * Test all properties of a node.
   */
  function testNodeProperties() {
    $title = 'Book 1';
    $node = $this->drupalCreateNode(array('title' => $title, 'type' => 'page'));
    $wrapper = entity_metadata_wrapper('node', $node);
    foreach ($wrapper as $key => $info) {
      if ($key != 'book' && $key != 'book-id') {
        $this->assertValue($wrapper, $key);
      }
    }
    $this->assertException($wrapper, 'book');
    $this->assertException($wrapper, 'book-id');
  }

  /**
   * Tests properties provided by the taxonomy module.
   */
  function testTaxonomyProperties() {
    $vocab = $this->createVocab();
    $term_parent = entity_metadata_entity_create('taxonomy_term', array(
      'name' => $this->randomName(),
      'vocabulary' => $vocab,
    ));
    taxonomy_term_save($term_parent);
    $term = entity_metadata_entity_create('taxonomy_term', array(
      'name' => $this->randomName(),
      'vocabulary' => $vocab,
      'description' => $this->randomString(),
      'weight' => mt_rand(0, 10),
    ));
    // This term hasn't all properties set yet, so set them.
    $term->parent = array($term_parent->tid);
    taxonomy_term_save($term);

    $wrapper = entity_metadata_wrapper('taxonomy_term', $term);
    foreach ($wrapper as $key => $info) {
      $this->assertValue($wrapper, $key);
    }
    // Test vocabulary.
    foreach ($wrapper->vocabulary as $key => $info) {
      $this->assertValue($wrapper->vocabulary, $key);
    }
    // Test field integration.
    $tags[LANGUAGE_NONE][0]['tid'] = $term->tid;
    //$tags[LANGUAGE_NONE][1]['tid'] = $term_parent->tid;
    $node = $this->drupalCreateNode(array('title' => 'foo', 'type' => 'article', 'taxonomy_tags' => $tags));
    $wrapper = entity_metadata_wrapper('node', $node);
    $this->assertEqual($wrapper->taxonomy_tags[0]->name->value(), $term->name, 'Get an associated tag of a node with the wrapper.');
    $wrapper->taxonomy_tags[1] = $term_parent;
    $tags = $wrapper->taxonomy_tags->value();
    $this->assertEqual($tags[1]->tid, $term_parent->tid, 'Associated a new tag with a node.');
    $this->assertEqual($tags[0]->tid, $term->tid, 'Previsous set association kept.');
  }

  /**
   * Test all properties of a user.
   */
  function testUserProperties() {
    $account = $this->drupalCreateUser();
    $wrapper = entity_metadata_wrapper('user', $account);
    foreach ($wrapper as $key => $info) {
      $this->assertValue($wrapper, $key);
    }
  }

  /**
   * Test properties provided by system module.
   */
  function testSystemProperties() {
    $wrapper = entity_metadata_wrapper('system', FALSE);
    foreach ($wrapper as $key => $info) {
      $this->assertValue($wrapper, $key);
    }
    // Test files.
    $filepath = file_destination('temporary://' . $this->randomName(), FILE_EXISTS_REPLACE);
    file_put_contents($filepath, "content");
    $this->assertTrue(is_file($filepath), t('The test file exists on the disk.'), 'Create test file');
    $file = new stdClass();
    $file->uri = $filepath;
    $file->filename = basename($file->uri);
    $file->filemime = 'text/plain';
    $file->uid = 1;
    $file->timestamp = REQUEST_TIME;
    $file->filesize = filesize($file->uri);
    $file->status = 0;
    file_save($file);

    $wrapper = entity_metadata_wrapper('file', $file);
    foreach ($wrapper as $key => $info) {
      $this->assertValue($wrapper, $key);
    }
  }

  /**
   * Runs some generic tests on each entity.
   */
  function testCRUDfunctions() {
    $info = entity_get_info();
    foreach ($info as $entity_type => $entity_info) {
      // Test using access callback.
      entity_metadata_entity_access('view', $entity_type);
      entity_metadata_entity_access('update', $entity_type);
      entity_metadata_entity_access('create', $entity_type);
      entity_metadata_entity_access('delete', $entity_type);

      // Test creating the entity.
      if (!isset($entity_info['creation callback'])) {
        continue;
      }

      // Populate $values with all values that are setable. They will be set
      // with an metadata wrapper, so we also test setting that way.
      $values = array();
      foreach (entity_metadata_wrapper($entity_type) as $name => $info) {
        if (!empty($info['setter callback'])) {
          $info += array('type' => 'text');
          $values[$name] = $this->createValue($info['type'], $info);
        }
      }
      $entity = entity_metadata_entity_create($entity_type, $values);
      $this->assertTrue($entity, "Created $entity_type and set all setable values.");

      // Save the new entity.
      $return = entity_metadata_entity_save($entity_type, $entity);
      if ($return === FALSE) {
        continue; // No support for saving.
      }
      $id = entity_metadata_wrapper($entity_type, $entity)->getIdentifier();
      $this->assertTrue($id, "$entity_type has been successfully saved.");

      // And delete it.
      $return = entity_metadata_entity_delete($entity_type, $id);
      if ($return === FALSE) {
        continue; // No support for saving.
      }
      $return = entity_load($entity_type, array($id));
      $this->assertFalse($return, "$entity_type has been successfully deleted.");
    }
  }

  /**
   * Creates a value for the given type.
   */
  protected function createValue($type, $info) {
    if (!isset($this->node)) {
      $this->node = $this->drupalCreateNode(array('type' => 'page'));
      $this->user = $this->drupalCreateUser();
      $this->taxonomy_vocabulary = $this->createVocab();
    }

    if (isset($info['options list'])) {
      $options = array_keys($info['options list']());
      return entity_metadata_list_extract_type($type) ? array(reset($options)) : reset($options);
    }

    switch ($type) {
      case 'decimal':
      case 'integer':
      case 'duration':
        return 1;
      case 'date':
        return time();
      case 'boolean':
        return TRUE;
      case 'text':
        return drupal_strtolower($this->randomName(8));
      case 'text_formatted':
        return array('value' => $this->randomName(16));
      default:
        return $this->$type;
    }
  }

  protected function createVocab() {
    $vocab = entity_metadata_entity_create('taxonomy_vocabulary', array(
      'name' => $this->randomName(),
      'machine_name' => drupal_strtolower($this->randomName()),
      'description' => $this->randomName(),
    ));
    taxonomy_vocabulary_save($vocab);
    return $vocab;
  }
}

