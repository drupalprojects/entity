<?php
// $Id$

/**
 * @file
 * Entity CRUD API tests.
 */

/**
 * Test basic API.
 */
class EntityAPITestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity API',
      'description' => 'Tests basic API functionality.',
      'group' => 'Entity',
    );
  }

  function setUp() {
    parent::setUp('entity', 'entity_test');
  }

  /**
   * Tests CRUD.
   */
  function testCRUD() {
    $user1 = $this->drupalCreateUser();
    // Create test entities for the user1 and unrelated to a user.
    $entity = new EntityClass(array('name' => 'test', 'uid' => $user1->uid));
    $entity->save();
    $entity = new EntityClass(array('name' => 'test2', 'uid' => $user1->uid));
    $entity->save();
    $entity = new EntityClass(array('name' => 'test', 'uid' => NULL));
    $entity->save();

    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test')));

    $this->assertEqual($entities[0]->name, 'test', 'Created and loaded entity.');
    $this->assertEqual($entities[1]->name, 'test', 'Created and loaded entity.');

    $results = entity_test_load_multiple(array($entity->pid));
    $loaded = array_pop($results);
    $this->assertEqual($loaded->pid, $entity->pid, 'Loaded the entity unrelated to a user.');

    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test2')));
    $entities[0]->delete();
    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test2')));
    $this->assertEqual($entities, array(), 'Entity successfully deleted.');

    $entity->save();
    $this->assertEqual($entity->pid, $loaded->pid, 'Entity successfully updated.');

    // Try deleting multiple test entities by deleting all.
    $pids = array_keys(entity_test_load_multiple(FALSE));
    entity_test_delete_multiple($pids);
  }

  /**
   * Test loading entities defined in code.
   */
  function testExportables() {
    $types = entity_load('entity_test_type', array('test', 'test2'));
    $this->assertEqual($types['test']->label, 'label', 'Default type loaded.');
    $this->assertTrue($types['test']->status & ENTITY_IN_CODE && !($types['test']->status & ENTITY_IN_DB), 'Default type status is correct.');

    $types['test']->label = 'modified';
    $types['test']->save();
    $types = entity_load('entity_test_type', array('test', 'test2'));
    $this->assertEqual($types['test']->label, 'modified', 'Modified default type loaded correctly.');
    $this->assertTrue($types['test']->status & ENTITY_IN_CODE && $types['test']->status & ENTITY_IN_DB, 'Status of modified type is correct.');
  }
}

